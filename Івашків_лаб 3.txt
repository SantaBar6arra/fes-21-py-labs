from abc import ABC, abstractmethod


class Employee(ABC):
    def __init__(self, name):
        self.name = name

    @abstractmethod
    def perform_duty(self):
        pass


class Developer(Employee):
    def __init__(self, name, skills):
        super().__init__(name)
        self.skills = skills

    def perform_duty(self):
        print(f"{self.name} is developing software.")


class SoftwareArchitect(Employee):
    def __init__(self, name):
        super().__init__(name)

    def perform_duty(self):
        print(f"{self.name} is designing software architecture.")


class TeamLead(Employee):
    def __init__(self, name):
        super().__init__(name)

    def perform_duty(self):
        print(f"{self.name} is leading the team.")


class QA(Employee):
    def __init__(self, name):
        super().__init__(name)

    def perform_duty(self):
        print(f"{self.name} is performing software testing.")


class BusinessAnalyst(Employee):
    def __init__(self, name):
        super().__init__(name)

    def perform_duty(self):
        print(f"{self.name} is analyzing business requirements.")


class Software:
    def __init__(self, name):
        self.name = name
        self.engineers = []

    def add_engineer(self, engineer):
        self.engineers.append(engineer)

    def perform_engineering(self):
        print(f"Software {self.name} development pipeline:")
        for step in self.engineers:
            step.perform_duty()


# Приклад взаємодії працівників та програмного забезпечення

developer1 = Developer("John", ["Java", "Python"])
developer2 = Developer("Alice", ["C++", "JavaScript"])
architect1 = SoftwareArchitect("Bob")
team_lead1 = TeamLead("Emma")
qa1 = QA("Tom")
business_analyst1 = BusinessAnalyst("Alex")

app1 = Software("MyApp")
app1.add_engineer(developer1)
app1.add_engineer(architect1)
app1.add_engineer(qa1)

web_app1 = Software("WebApp")
web_app1.add_engineer(developer2)
web_app1.add_engineer(architect1)
web_app1.add_engineer(qa1)

database_api1 = Software("DatabaseAPI")
database_api1.add_engineer(developer1)
database_api1.add_engineer(developer2)
database_api1.add_engineer(architect1)
database_api1.add_engineer(qa1)

containerization1 = Software("Containerization")
containerization1.add_engineer(developer1)
containerization1.add_engineer(architect1)
containerization1.add_engineer(team_lead1)

deployment1 = Software("Deployment")
deployment1.add_engineer(developer1)
deployment1.add_engineer(developer2)
deployment1.add_engineer(architect1)
deployment1.add_engineer(team_lead1)

app1.perform_engineering()
print("------------------------")
web_app1.perform_engineering()
print("------------------------")
database_api1.perform_engineering()
print("------------------------")
containerization1.perform_engineering()
print("------------------------")
deployment1.perform_engineering()